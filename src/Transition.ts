/**
 * Transition.ts
 * @author Diao Zheng
 * @file Defines types for `react-native-pose` transitions.
 *
 * @ignore_test
 * @barrel export all
 */

import { ReactTypes as RTypes, Types } from "nasi-lemak";
import { Animated } from "react-native";

export interface ITransitionBase<T> {
  duration?: number;
  from?: T;
  delay?: number;
  min?: T;
  max?: T;
  round?: boolean;
}

export type EasingFunction =
    | "linear"
    | "easeIn"
    | "easeOut"
    | "easeInOut"
    | "circIn"
    | "circOut"
    | "circInOut"
    | "backIn"
    | "backOut"
    | "backInOut"
    | "anticipate"
    | [number, number, number, number]
;

export interface ITween<T> extends ITransitionBase<T> {
  ease: EasingFunction;
  elapsed?: number;
  loop?: number;
  flip?: number;
  yoyo?: number;
  to?: T;
}

/**
 * cf. https://popmotion.io/api/spring/
 */
export interface ISpring<T> extends ITransitionBase<T> {
  type: "spring";
  stiffness?: number;
  damping?: number;
  mass?: number;
  velocity?: number;
  restDelta?: number;
  restSpeed?: number;
  to?: T;
}

/**
 * cf.  https://popmotion.io/api/decay/
 */
export interface IDecay<T> extends ITransitionBase<T> {
  type: "decay";
  velocity?: number;
  power?: number;
  timeConstant?: number;
  restDelta?: number;
  modifyingTarget?(v: number): number;
}

/**
 * cf. https://popmotion.io/api/keyframes/
 */
export interface IKeyframes<T> extends ITransitionBase<T> {
  type: "keyframes";
  values?: T[];
  easings?: EasingFunction[];
  time?: number;
  elapsed?: number;
  ease?: EasingFunction;
  loop?: number;
  flip?: number;
  yoyo?: number;
}

/**
 * https://popmotion.io/api/physics/
 */
export interface IPhysics<T> extends ITransitionBase<T> {
  type: "physics";
  velocity?: number;
  acceleration?: number;
  restSpeed?: number;
  friction?: number;
  springStrength?: number;
  to?: number;
}

export interface ITransitionProps<TValue, TPose extends string> {
  value: TValue;
  from: TValue;
  to: TValue;
  velocity?: number;
  key: TPose;
  prevPoseKey: TPose;
  useNativeDriver?: boolean;
}

export type Transition<T> =
  | ITween<T>
  | ISpring<T>
  | IDecay<T>
  | IKeyframes<T>
  | IPhysics<T>
;

export type FunctionTransition<TValue, TPose extends string> =
  (props: ITransitionProps<TValue, TPose>) =>
    | Transition<TValue>
    | Animated.CompositeAnimation
;

export type ConfigType<T, TPose extends string> =
  | Transition<T>
  | FunctionTransition<T, TPose>
;

/**
 * A transparent HOC that allows the original pose configuration to be returned
 * without the `pose` prop. This allows the `enter | exit` poses to be passed
 * to the `Transition` component for `react-native-pose` to produce entry/exit
 * transitions.
 * @param Component The posed element generated by
 * `Posed.{View|ScrollView|Text|Image}`
 */
export function withTransition<TComponent>(
  Component: TComponent,
): React.ReactType<Types.ExcludeKeys<RTypes.PropType<TComponent>, "pose">>
{
  // here we're ignoring the type of the component just to make sure that our
  // required `posed` prop is no longer required. In reality, the same exact
  // constructor is returned back to `react-pose-core` so that transitions can
  // happen correctly.
  return Component as any;
}
